// Code generated by goagen v1.1.0-dirty, command line:
// $ goagen
// --design=dicebot/design
// --out=$(GOPATH)/src/dicebot
// --version=v1.1.0-dirty
//
// API "dicebot": dice Resource Client
//
// The content of this file is auto-generated, DO NOT MODIFY

package client

import (
	"bytes"
	"fmt"
	"golang.org/x/net/context"
	"net/http"
	"net/url"
)

// IndexDicePath computes a request path to the index action of dice.
func IndexDicePath(rollPattern string) string {
	param0 := rollPattern

	return fmt.Sprintf("/%s", param0)
}

// GET landing page
func (c *Client) IndexDice(ctx context.Context, path string) (*http.Response, error) {
	req, err := c.NewIndexDiceRequest(ctx, path)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewIndexDiceRequest create the request corresponding to the index action endpoint of the dice resource.
func (c *Client) NewIndexDiceRequest(ctx context.Context, path string) (*http.Request, error) {
	scheme := c.Scheme
	if scheme == "" {
		scheme = "http"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, err
	}
	return req, nil
}

// RollDicePayload is the dice roll action payload.
type RollDicePayload struct {
	// Roll response text
	Text string `form:"text" json:"text" xml:"text"`
}

// RollDicePath computes a request path to the roll action of dice.
func RollDicePath() string {

	return fmt.Sprintf("/")
}

// Roll the dice
func (c *Client) RollDice(ctx context.Context, path string, payload *RollDicePayload, contentType string) (*http.Response, error) {
	req, err := c.NewRollDiceRequest(ctx, path, payload, contentType)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewRollDiceRequest create the request corresponding to the roll action endpoint of the dice resource.
func (c *Client) NewRollDiceRequest(ctx context.Context, path string, payload *RollDicePayload, contentType string) (*http.Request, error) {
	var body bytes.Buffer
	if contentType == "" {
		contentType = "*/*" // Use default encoder
	}
	err := c.Encoder.Encode(payload, &body, contentType)
	if err != nil {
		return nil, fmt.Errorf("failed to encode body: %s", err)
	}
	scheme := c.Scheme
	if scheme == "" {
		scheme = "http"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("POST", u.String(), &body)
	if err != nil {
		return nil, err
	}
	header := req.Header
	if contentType != "*/*" {
		header.Set("Content-Type", contentType)
	}
	return req, nil
}
