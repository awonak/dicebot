// Code generated by goagen v1.1.0-dirty, command line:
// $ goagen
// --design=dicebot/design
// --out=$(GOPATH)/src/dicebot
// --version=v1.1.0-dirty
//
// API "dicebot": Application Contexts
//
// The content of this file is auto-generated, DO NOT MODIFY

package app

import (
	"github.com/goadesign/goa"
	"golang.org/x/net/context"
	"unicode/utf8"
)

// IndexDiceContext provides the dice index action context.
type IndexDiceContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	Pattern string
}

// NewIndexDiceContext parses the incoming request URL and body, performs validations and creates the
// context used by the dice controller index action.
func NewIndexDiceContext(ctx context.Context, service *goa.Service) (*IndexDiceContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	rctx := IndexDiceContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramPattern := req.Params["pattern"]
	if len(paramPattern) > 0 {
		rawPattern := paramPattern[0]
		rctx.Pattern = rawPattern
		if ok := goa.ValidatePattern(`^(\d+)d(\d+)$`, rctx.Pattern); !ok {
			err = goa.MergeErrors(err, goa.InvalidPatternError(`pattern`, rctx.Pattern, `^(\d+)d(\d+)$`))
		}
		if utf8.RuneCountInString(rctx.Pattern) < 3 {
			err = goa.MergeErrors(err, goa.InvalidLengthError(`pattern`, rctx.Pattern, utf8.RuneCountInString(rctx.Pattern), 3, true))
		}
		if utf8.RuneCountInString(rctx.Pattern) > 6 {
			err = goa.MergeErrors(err, goa.InvalidLengthError(`pattern`, rctx.Pattern, utf8.RuneCountInString(rctx.Pattern), 6, false))
		}
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *IndexDiceContext) OK(r *GoaDiceroll) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/json")
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// OKRoll sends a HTTP response with status code 200.
func (ctx *IndexDiceContext) OKRoll(r *GoaDicerollRoll) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/json")
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *IndexDiceContext) BadRequest() error {
	ctx.ResponseData.WriteHeader(400)
	return nil
}

// NotFound sends a HTTP response with status code 404.
func (ctx *IndexDiceContext) NotFound() error {
	ctx.ResponseData.WriteHeader(404)
	return nil
}

// RollDiceContext provides the dice roll action context.
type RollDiceContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	Payload *DiceRollPayload
}

// NewRollDiceContext parses the incoming request URL and body, performs validations and creates the
// context used by the dice controller roll action.
func NewRollDiceContext(ctx context.Context, service *goa.Service) (*RollDiceContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	rctx := RollDiceContext{Context: ctx, ResponseData: resp, RequestData: req}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *RollDiceContext) OK(r *GoaDiceroll) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/json")
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// OKRoll sends a HTTP response with status code 200.
func (ctx *RollDiceContext) OKRoll(r *GoaDicerollRoll) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/json")
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *RollDiceContext) BadRequest() error {
	ctx.ResponseData.WriteHeader(400)
	return nil
}

// NotFound sends a HTTP response with status code 404.
func (ctx *RollDiceContext) NotFound() error {
	ctx.ResponseData.WriteHeader(404)
	return nil
}
